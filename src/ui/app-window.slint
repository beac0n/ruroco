import { Button, ComboBox, ListView, StandardTableView, GridBox, Slider, LineEdit } from "std-widgets.slint";
import { ArgRowText, ArgRowTextInput, ArgRowIntInput, ArgRowBoolInput } from "./arg-row.slint";
import { CommandsInput } from "commands-input.slint";

export component AppWindow inherits Window {
    in-out property <[string]> commands_list: [];
    in-out property <string> public_key: "";
    in-out property <string> private_pem_path: "";
    property <string> address: "";
    in-out property <string> command: "";
    in-out property <string> deadline: "";
    property <bool> permissive: false;
    property <string> ip: "";
    in-out property <string> ntp: "";
    property <bool> ipv4: false;
    property <bool> ipv6: false;

    callback add_command(string);
    callback exec_command(string);
    callback del_command(string);

    // parent layout
    VerticalLayout {
        HorizontalLayout {
            public_key_box := LineEdit {
                height: 50px;
                input-type: InputType.text;
                enabled: false;
                text <=> root.public_key;
            }

            Button {
                height: 50px;
                text: "Copy Public PEM key";
                clicked => {
                    public_key_box.select-all();
                    public_key_box.copy();
                    public_key_box.clear-selection()
                }
            }
        }

        CommandsInput {
            address <=> root.address;
            command <=> root.command;
            deadline <=> root.deadline;
            permissive <=> root.permissive;
            ip <=> root.ip;
            ntp <=> root.ntp;
            ipv4 <=> root.ipv4;
            ipv6 <=> root.ipv6;
        }

        HorizontalLayout {
            Rectangle {
                Button {
                    height: 50px;
                    text: "Add Command";
                    clicked => {
                        root.add_command(
                            "send"//
                            + (root.address == "" ? "" : " --address " + root.address)//
                            + (root.private_pem_path == "" ? "" : " --private-pem-path " + root.private_pem_path)//
                            + (root.command == "" ? "" : " --command " + root.command)//
                            + " --deadline " + root.deadline//
                            + (root.permissive ? "--permissive" : "")//
                            + (root.ip == "" ? "" : " --ip " + root.ip)//
                            + (root.ntp == "" ? "" : " --ntp " + root.ntp)//
                            + (root.ipv4 ? " --ipv4" : "")//
                            + (root.ipv6 ? " --ipv6" : "")//
                        )
                    }
                }
            }
        }

        // saved commands list
        VerticalLayout {
            Text {
                height: 50px;
                text: "Saved Commands:";
                overflow: TextOverflow.clip;
                horizontal-alignment: TextHorizontalAlignment.center;
                vertical-alignment: TextVerticalAlignment.center;
            }

            ListView {

                for text in commands_list: HorizontalLayout {
                    Button {
                        height: 50px;
                        width: 50px;
                        text: "â–¶";
                        clicked => {
                            root.exec_command(text)
                        }
                    }

                    Rectangle {
                        horizontal-stretch: 1.0;
                        Text {
                            x: 10px;
                            width: parent.width - self.x;
                            horizontal-alignment: TextHorizontalAlignment.left;
                            vertical-alignment: TextVerticalAlignment.center;
                            text: text;
                            overflow: TextOverflow.elide;
                        }
                    }

                    Button {
                        height: 50px;
                        width: 50px;
                        text: "ðŸ—‘";
                        clicked => {
                            root.del_command(text)
                        }
                    }
                }
            }
        }
    }
}
